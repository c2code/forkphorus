<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Smart">
  <title>smart 少儿编程</title>
  <script>
    // Apply local dark mode preference very early to avoid a flash of white
    (function() {
      try {
        if (localStorage.getItem('userPrefersDark') === 'true') {
          document.documentElement.classList.add('dark');
        }
      } catch (e) {
        console.error('error loading theme choice', e);
      }
    }());
  </script>
  <link rel="stylesheet" href="phosphorus.css">
  <link rel="stylesheet" href="studioview/studioview.css">
  <link rel="stylesheet" href="index.css">
</head>

<body>

  <div class="theme-select">
    smart 少儿编程
  </div>

  <div id="app">

    <div class="area" id="title-area">
      <p><a class="upload-button"><input id="upload-file-input" type="file" autocomplete="off" accept=".sb2,.sb3">selecting a project file</a></p>
    </div>

    <div id="examples-container" class="area">
      <div id="examples-view"></div>
      <div id="examples-footer"></div>
    </div>

    <div class="area" id="player-area"></div>

    <div class="area" id="project-area"></div>
  </div>

  <script src="lib/jszip.min.js"></script>
  <script src="lib/fontfaceobserver.standalone.js"></script>
  <script src="lib/stackblur.min.js"></script>
  <script src="lib/rgbcolor.js"></script>
  <script src="lib/canvg.min.js"></script>
  <script src="phosphorus.dist.js"></script>
  <script src="studioview/studioview.js"></script>

  <script>
    P.i18n.addTranslations('en', {
      'studioview.authorAttribution': 'by $author',
      'studioview.projectHoverText': '$title by $author',
      'index.report.instructions': 'Describe the issue:',
      'index.document.title': 'forkphorus - phosphorus for Scratch 3',
      'index.report': 'Report a problem',
      'index.embed': 'Embed this project',
      'index.package': 'Package this project',
      'index.settings': 'Settings',
      'index.credits': 'Credits',
      'index.code': 'Code',
      'index.studio.view': 'View studio on Scratch.',
      'index.package.button': 'Package',
      'index.package.turbo': 'Turbo mode',
      'index.package.fullscreen': 'Full screen',
      'index.package.480': '480\u00D7360',
      'index.package.custom': 'Other:',
      'index.package.divider': '\u00D7',
      'index.embed.description': 'Include the forkphorus player in your web site.',
      'index.embed.autostart': 'Start automatically',
      'index.embed.lightControls': 'Light controls',
      'index.embed.hideUI': 'Hide UI',
    });
    P.i18n.addTranslations('es', {
      'studioview.authorAttribution': 'por $author',
      'studioview.projectHoverText': '$title por $author',
      'index.report': 'Reportar un problema',
      'index.settings': 'Configuraciones',
      'index.credits': 'Créditos',
      'index.code': 'Código',
    });
  </script>

  <script>

  (function() {
    'use strict';

    /** Utilities **/
    // document.querySelector but it throws if your selector failed
    function querySelector(selector) {
      var el = document.querySelector(selector);
      if (!el) {
        throw new Error('Selector returned nothing: ' + selector);
      }
      return el;
    }

    // Shallowly clones an object (member values are not cloned)
    function shallowClone(obj) {
      var result = {};
      for (var k in obj) {
        result[k] = obj[k];
      }
      return result;
    }

    /** i18n */
    document.title = P.i18n.translate('index.document.title');
    StudioView.AUTHOR_ATTRIBUTION = P.i18n.translate('studioview.authorAttribution');
    StudioView.PROJECT_HOVER_TEXT = P.i18n.translate('studioview.projectHoverText');
    P.i18n.translateElement(document.body);

    /** Constants **/
    var PROJECT_PREFIX = 'https://scratch.mit.edu/projects/';
    var STUDIO = '15926401';

    /** Core Player Logic **/
    var titleArea = querySelector('#title-area');
    var playerArea = querySelector('#player-area');
    var projectArea = querySelector('#project-area');

    var player = new P.player.Player();
    window.player = player;
    player.addControls();
    var errorHandler = new P.player.ErrorHandler(player);
    playerArea.appendChild(player.root);

    var initialId = location.hash.substr(1);
    if (!/^\d+$/.test(initialId)) {
      initialId = '';
    }

    playerArea.style.height = projectArea.style.height = 'auto';
    var titleAreaHeight = titleArea.offsetHeight;
    var playerAreaHeight = playerArea.offsetHeight;
    var projectAreaHeight = projectArea.offsetHeight;
    var studioViewAreaHeight = 330;
    playerArea.style.height = projectArea.style.height = 0;
    // Change location.hash w/o firing the hashchange event (or at least make it cancel)
    // Include the leading # in the provided hash
    function silentChangeHash(hash) {
      if (location.hash === hash) return;
      //ignoreNextHashChange = true;
      location.hash = hash;
    }

    function hidePlayerArea() {
      titleArea.style.height = titleAreaHeight + 'px';
      playerArea.style.height = '0px';
      projectArea.style.height = '0px';
      urlInput.focus();
      player.cleanup();
      if (studioView && studioView.visible) {
        examplesContainer.style.height = studioViewAreaHeight + 'px';
        examplesViewContainer.appendChild(studioView.root);
        studioView.projectList.scrollTop = studioView.scrollTop;
      }
      resetTitle();
    }
    function showPlayerArea() {
      titleArea.style.height = '0px';
      playerArea.style.height = playerAreaHeight + 'px';
      projectArea.style.height = projectAreaHeight + 'px';
      hideStudioView();
      examplesContainer.style.height = '0px';
    }
    function loadProjectId(id) {
      showPlayerArea();
      player.loadProjectId(id);
      updateLinks();
      setTitleToProjectTitle(id);
    }
    function loadProjectFile(file) {
      var extension = file.name.split('.').pop();
      if (!['sb2', 'sb3'].includes(extension)) {
        return;
      }
      silentChangeHash('#' + file.name);
      showPlayerArea();
      player.loadProjectFile(file);
      resetTitle();
    }
    var cachedTitles = {};
    var initialTitle = document.title;
    function resetTitle() {
      document.title = initialTitle;
    }
    function setTitleToProjectTitle(id) {
      var stageId = player.stageId;
      if (cachedTitles[id]) {
        document.title = cachedTitles[id] + ' - forkphorus';
      } else {
        player.getProjectTitle(id)
          .then(function(title) {
            if (player.stageId === stageId) {
              if (title) {
                cachedTitles[id] = title;
                player.projectTitle = title;
                document.title = title + ' - forkphorus';
                updateLinks();
              } else {
                resetTitle();
              }
            }
          });
      }
    }

    // Bind two inputs together so that changes to one reflect a change in the other.
    function bindInputs(first, other, multiplier) {
      var fun1 = function() { other.value = Math.round(first.value * multiplier); };
      var fun2 = function() { first.value = Math.round(other.value * (1 / multiplier)); };
      first.addEventListener('input', fun1);
      first.addEventListener('change', fun1);
      other.addEventListener('input', fun2);
      other.addEventListener('change', fun2);
    }

    /** Local File Loading **/
    var uploadFileInput = querySelector('#upload-file-input');
    //var uploadFileInput = querySelector('https://adapter.codelab.club/sb3/Pong_Starter.sb3');

    function cancelDragEvent(e) {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'copy';
    }
    document.body.addEventListener('dragover', cancelDragEvent);
    document.body.addEventListener('dragenter', cancelDragEvent);
    document.body.addEventListener('drop', function(e) {
      e.preventDefault();
      var file = e.dataTransfer.files[0];
      if (file) {
        loadProjectFile(file);
      }
    });
    uploadFileInput.addEventListener('change', function(e) {
      /*var file = e.target.files[0];
      if (file) {
        loadProjectFile(file);
      }*/
      jQuery.ajax({
        url: "https://adapter.codelab.club/sb3/Pong_Starter.sb3",
        dataType: 'json',   // you can also use xml, json, html here
        success : function(data) {
          loadProjectFile(data);
        },
        error : function(xhr, textStatus, errorThrown) {
          console.log("ERROR: "+textStatus+", "+errorThrown);
        },
        async: true
      });

    });

    /** Studio selector **/
    var examplesContainer = querySelector('#examples-container');
    var examplesViewContainer = querySelector('#examples-view');
    var examplesFooter = querySelector('#examples-footer');
    examplesContainer.style.height = '0px';
    var studioView = null;
    function hideStudioView() {
      examplesContainer.style.height = '0px';
      if (studioView && studioView.visible && studioView.root.parentNode) {
        studioView.scrollTop = studioView.projectList.scrollTop;
        examplesViewContainer.removeChild(studioView.root);
      }
    }
    function initStudioView() {
      studioView = new StudioView(STUDIO);
      studioView.visible = false;
      studioView.onselect = function(id, el) {
        cachedTitles[id] = el.dataset.title;
        location.hash = '#' + id;
      };
      studioView.loadNextPage();
      studioView.setTheme(document.documentElement.classList.contains('dark') ? 'dark' : 'light');
      studioView.scrollTop = 0;

      var link = document.createElement('a');
      link.innerText = P.i18n.translate('index.studio.view');
      link.target = '_blank';
      link.rel = 'noopener';
      link.href = studioView.getURL();
      examplesFooter.appendChild(link);
    }

    /** Dark Mode **/
    function getLocalDarkMode() {
      try {
        const value = localStorage.getItem('userPrefersDark');
        if (!value) {
          // value is undefined or null
          return getDefaultDarkMode();
        }
        // value is the string 'true' or the string 'false'
        return value === 'true';
      } catch (e) {
        console.warn('error getting local color choice', e);
        return false;
      }
    }
    function getDefaultDarkMode() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    function setDarkMode(dark) {
      if (dark) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      player.setTheme(dark ? 'dark' : 'light');
      if (studioView) {
        studioView.setTheme(dark ? 'dark' : 'light');
      }
      try {
        return localStorage.setItem('userPrefersDark', dark);
      } catch (e) {
        console.error('error saving color choice', e);
      }
    }
    setDarkMode(getLocalDarkMode());
  }());
  </script>

</body>

</html>
